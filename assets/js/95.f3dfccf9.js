(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{753:function(t,o,s){"use strict";s.r(o);var e=s(6),i=Object(e.a)({},(function(){var t=this,o=t.$createElement,s=t._self._c||o;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"成长足迹"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成长足迹"}},[t._v("#")]),t._v(" 成长足迹")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("[ ] hooks是如何实现的？为什么一定要放在最外层？执行顺序对hooks内部有何影响？")])]),t._v(" "),s("li",[s("p",[t._v("[ ] Router 工作流程，能自己用语言描述一下应该怎么使用吗？比较一下react-route和使用hooks的实现有什么区别？为什么路由跳转需要用到useHistory而不能直接用原生的history或loacation跳转")])]),t._v(" "),s("li",[s("p",[t._v("<BrowserRouter> : 路由的根容器，可以定义以下属性")]),t._v(" "),s("ul",[s("li",[t._v("basename: string")]),t._v(" "),s("li",[t._v("getUserConfirmation: func")]),t._v(" "),s("li",[t._v("forceRefresh: bool")]),t._v(" "),s("li",[t._v("children: node")])])]),t._v(" "),s("li",[s("p",[t._v("<Switch>")])]),t._v(" "),s("li",[s("p",[t._v("<Route>")])]),t._v(" "),s("li",[s("p",[t._v("<Link>")])]),t._v(" "),s("li",[s("p",[t._v("React router中的history是基于一个封装好的history库，能够管理js应用session会话历史的js库。它将不同环境（浏览器，node...）的变量统一成了一个简易的API来管理历史堆栈、导航、确认跳转、以及sessions间的持续状态。理论上原生的history跳转也行，待实践。。。(实践发现原生的history只能改变location地址，页面并不会发生变化，而用loaction.href跳转，整个页面的刷新了，不推荐)")])]),t._v(" "),s("li",[s("p",[t._v("[ ] React 表单库是如何实现给子组件传递props的？")])]),t._v(" "),s("li",[s("p",[t._v("[ ] 讲一下babel的工作方式，试下能否自己实现按需加载，能否自己实现扫描到中文提取出来，最后用j'son的方式实现国际化？")])]),t._v(" "),s("li",[s("p",[t._v("[ ] ts 装饰器的用法，实现原理？")])])])])}),[],!1,null,null,null);o.default=i.exports}}]);