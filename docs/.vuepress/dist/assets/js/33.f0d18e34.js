(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{537:function(s,a,t){"use strict";t.r(a);var e=t(3),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"git-相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-相关"}},[s._v("#")]),s._v(" git 相关")]),s._v(" "),t("h3",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),t("h4",{attrs:{id:"分支合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支合并"}},[s._v("#")]),s._v(" 分支合并")]),s._v(" "),t("p",[s._v("在master上执行：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("git merge fix ==> 创建一个新的节点，将master 和 fix 的内容都合并在这个节点上，再将master 移动到该节点，原mater节点保留，此时master有两个父节点")])]),s._v(" "),t("li",[t("p",[s._v("git rebase fix ==> 注意是把master 上的内容追加到 fix  上，原master节点将会消除，此时master只有一个父节点fix")])]),s._v(" "),t("li",[t("p",[s._v("git rebase fix another ==>  将another  分支追加到 fix ，若another为空，则将当前所在的分支追加")])]),s._v(" "),t("li",[t("p",[s._v("git cherry-pick c1 c9 ==> 创建两个新节点，将c1 和 c9 的提交分别追加进去，master最后位于 c9 节点，当然追加的数量是任意的，例如 git cherry-pick c1 c4 c8")])])]),s._v(" "),t("h4",{attrs:{id:"分支移动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支移动"}},[s._v("#")]),s._v(" 分支移动")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("git checkout 哈希值  ==> 移动到该值对应的节点")])]),s._v(" "),t("li",[t("p",[s._v("git checkout HEAD^ ==> 移动到上一个节点")])]),s._v(" "),t("li",[t("p",[s._v("git checkout HEAD^2 ==> 移动到上一个节点的第二个兄弟节点")])]),s._v(" "),t("li",[t("p",[s._v("git checkout HEAD~9 ==> 移动到上第九个节点，数字可自定义")])]),s._v(" "),t("li",[t("p",[s._v("git branch -f master (哈希值｜HEAD^| HEAD~7) ==> HEAD不变，master分支移动到对应的位置")])])]),s._v(" "),t("h4",{attrs:{id:"撤销历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#撤销历史"}},[s._v("#")]),s._v(" 撤销历史")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("git reset  (哈希值｜HEAD^| HEAD~7)  ==> 用于回退本地分支，本地仓库回退后对子节点不可见")])]),s._v(" "),t("li",[t("p",[s._v("git revert  (哈希值｜HEAD^| HEAD~7)  ==> 用于回退远程分支，将回退的操作加到一个新节点，这样既可以达到回退的效果而原来的节点也没有变")])])]),s._v(" "),t("h4",{attrs:{id:"远程相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远程相关"}},[s._v("#")]),s._v(" 远程相关")]),s._v(" "),t("ul",[t("li",[s._v("分支不存在")])]),s._v(" "),t("p",[s._v("git checkout -b totallyNotMaster o/master")]),s._v(" "),t("ul",[t("li",[s._v("分支存在")])]),s._v(" "),t("p",[s._v("git branch -u o/master foo   foo省略的话默认是当前分支")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("git branch -u origin/master test ==> 使本地的test分支关联远程的master，如果省略test，则关系本地的当前分支")])]),s._v(" "),t("li",[t("p",[s._v("git push origin master ==> 切到本地仓库中的“master”分支，获取所有的提交，再到远程仓库“origin”中找到“master”分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我，可以在任意节点执行")])]),s._v(" "),t("li",[t("p",[s._v("git push origin foo^:master ==> 以foo的上一个节点为参考，上传所有未被包含到远程仓库里 "),t("code",[s._v("master")]),s._v(" 分支中的提交记录，当：后面的分支远程不存在时，会自动创建")])]),s._v(" "),t("li",[t("p",[s._v("git push origin :foo ==> 通过给 push 传空值 source，删除本地的 origin/foo 分支和远程仓库中的 "),t("code",[s._v("foo")]),s._v(" 分支")])])]),s._v(" "),t("h4",{attrs:{id:"tag-相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tag-相关"}},[s._v("#")]),s._v(" Tag 相关")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("git tag v1.0 c1 ==> 在 c1 的节点上打上tag v1.0")])]),s._v(" "),t("li",[t("p",[s._v("git describe master ==>  输出离master最近的tag信息，格式为<tag>_<numCommits>_g<hash>，如 v0_2_gC2 表示 master 所在节点的哈希值为C2 , 最近的tag是v0 , 距离master有2个节点的距离")])])]),s._v(" "),t("h4",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),t("ul",[t("li",[s._v("git rebase -i c1  ==> 以交互式的方式调整c1到当前HEAD的各节点顺序，还可以直接排除某个节点，然后根据你操作的结果生成新的节点")])]),s._v(" "),t("h3",{attrs:{id:"git-设置公钥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-设置公钥"}},[s._v("#")]),s._v(" git 设置公钥")]),s._v(" "),t("p",[t("code",[s._v('ssh-keygen -t rsa -C "youremail@abc.com"')])]),s._v(" "),t("h3",{attrs:{id:"解决git-clone-慢的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决git-clone-慢的问题"}},[s._v("#")]),s._v(" 解决git clone 慢的问题")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nslookup")]),s._v(" github.global.ssl.fastly.Net\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nslookup")]),s._v(" github.com\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将找到的ip地址写入/etc/host")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13.229")]),s._v(".188.59 github.com\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("151.101")]),s._v(".229.194 github.global.ssl.fastly.Net\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 刷新dns缓存")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# manjaro linux系统下使用命令： sudo systemctl restart NetworkManager.service")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"小技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小技巧"}},[s._v("#")]),s._v(" 小技巧")]),s._v(" "),t("ol",[t("li",[s._v("当代码写到一半时忽然有个紧急bug，想切换到另一分支修改，此时可以：")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" stash\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("改完bug想回到自己的分支再次愉快得码代码时，可以执行：")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" stash pop\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("但有一种情况，你突然想在这之前合并一下主分支，于是你在你的分支执行：")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge master\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("此时合并后发现有冲突了，改完冲突后你又想切换分支了，执行第一步的命令，哎，发现这种情况这条命令不能成功运行，此时可以回退版本")])]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("reset")]),s._v(" 如果不加参数，那么默认使用 "),t("strong",[s._v("--mixed")]),s._v(" 参数。它的行为是：保留工作目录，并且清空暂存区。也就是说，工作目录的修改、暂存区的内容以及由 "),t("strong",[s._v("reset")]),s._v(" 所导致的新的文件差异，都会被放进工作目录。简而言之，就是「把所有差异都混合（mixed）放在工作目录中」。")])]),s._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[s._v("再次执行 "),t("code",[s._v("git stash")]),s._v(" ，成功！")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("将A分支的a文件合并到B分支的a文件上。可以通过以下方式合并:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout B\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout --patch A a\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("先切换到B分支，将A分支的a文件给与B。\n然后碰到了Apply this hunk to index and worktree [y,n,q,a,d,/,K,j,J,g,e,?]")]),s._v(" "),t("blockquote",[t("p",[s._v("解释")]),s._v(" "),t("p",[s._v("y - 存储这个hunk\nn - 不存储这个hunk\nq - 离开，不存储这个hunk和其他hunk\na - 存储这个hunk和这个文件后面的hunk\nd - 不存储这个hunk和这个文件后面的hunk\ng - 选择一个hunk\n/ - 通过正则查找hunk\nj - 不确定是否存储这个hunk，看下一个不确定的hunk\nJ - 不确定是否存储这个hunk，看下一个hunk\nk - 不确定是否存储这个hunk，看上一个不确定的hunk\nK -不确定是否存储这个hunk，看上一个hunk\ns - 把当前的hunk分成更小的hunks\ne - 手动编辑当前的hunk\n? - 输出帮助信息")])]),s._v(" "),t("h3",{attrs:{id:"git-clone-部分文件夹"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-clone-部分文件夹"}},[s._v("#")]),s._v(" git clone 部分文件夹")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("新建一个文件夹，在该目录运行bash")])]),s._v(" "),t("li",[t("p",[s._v("初始化仓库")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("设置sparsecheckout")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config core.sparsecheckout "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("设置你要克隆的文件夹，假如你想克隆test文件夹，输入")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'test'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" .git/info/sparse-checkout "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#注意这个命名一定要正确")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看是否设置成功 more .git/info/sparse-checkout(more类似于cat命令，用于查看")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("添加远程仓库，后面填你的地址名")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" origin git@gitee.com:xxx\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("拉取代码")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull origin master\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])]),s._v(" "),t("ul",[t("li",[s._v('遇到"您的配置中指定要合并远程的引用<xxxxx>,但是没有获取到这个引用。"这个问题时，请检查远程仓库是否有<xxxxx>这个分支')])])])}),[],!1,null,null,null);a.default=n.exports}}]);